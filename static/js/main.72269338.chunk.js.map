{"version":3,"sources":["components/ToggleButton/ToggleButton.js","components/GridList/GridList.js","components/SimpleList/SimpleListItem.js","components/SimpleList/SimpleList.js","components/Misc/RenderCocktails.js","components/Input/Input.js","components/Dropdown/DropdownItem.js","components/Dropdown/Dropdown.js","components/SearchForm/SearchForm.js","components/Heading/Heading.js","components/Subheading/Subheading.js","components/ContentBlock/ContentBlock.js","firebase.js","index.js"],"names":["ToggleButton","props","className","id","type","onClick","label","GridList","gridListRef","useRef","useState","listLength","setListLength","useEffect","ingredients","length","current","scrollTop","scrollHeight","ref","map","ingredient","ingredient_id","ingredient_name","bind","SimpleListItem","class","name","key","SimpleList","listItems","cocktail","cocktail_name","cocktail_id","RenderCocktails","matchedCocktails","Input","input","DropdownItem","itemId","onItemClick","itemName","Dropdown","dropdownItems","item","SearchForm","enteredQuery","setEnteredQuery","matchingIngs","setMatchingIngs","inputHandler","event","target","value","toLowerCase","matchedItems","filter","includes","placeholder","onChange","onKeyDown","ingredientId","selectedIngs","Heading","children","Subheading","ContentBlock","firebaseDatabase","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","App","selectedIngredients","setSelectedIngredients","notSelectedIngredients","setNotSelectedIngredients","matchingCocktails","setMatchingCocktails","on","snapshot","val","handleSelectedIngredients","ingredientIndex","findIndex","find","prevState","ingredientIds","forEach","push","sort","cocktails","cocktail_ingredient_ids","every","index","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.72269338.chunk.js","sourcesContent":["import React from \"react\";\nimport { FaMinusCircle } from \"react-icons/fa\";\n\nconst ToggleButton = (props) => {\n    const handleClicks = () => {\n        props.onClick(true);\n    };\n\n    return (\n        <button\n            className={`toggle-button ${props.className}`}\n            id={props.id}\n            type={props.type}\n        >\n            <span onClick={handleClicks} className=\"toggle-button__icon\">\n                <FaMinusCircle></FaMinusCircle>\n            </span>\n            <span className=\"toggle-button__label\">{props.label}</span>\n        </button>\n    );\n};\n\nexport default ToggleButton;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport ToggleButton from \"../ToggleButton/ToggleButton\";\n\nconst GridList = (props) => {\n    const gridListRef = useRef();\n    const [listLength, setListLength] = useState(0);\n\n    useEffect(() => {\n        if (listLength !== props.ingredients.length) {\n            if (listLength < props.ingredients.length) {\n                gridListRef.current.scrollTop =\n                    gridListRef.current.scrollHeight;\n            }\n            setListLength(props.ingredients.length);\n        }\n    }, [props.ingredients, listLength]);\n\n    return (\n        <ul ref={gridListRef} className=\"grid-list\">\n            {props.ingredients.map((ingredient) => (\n                <li key={ingredient.ingredient_id} className=\"grid-list__item\">\n                    <ToggleButton\n                        id={ingredient.ingredient_id}\n                        label={ingredient.ingredient_name}\n                        onClick={props.onClick.bind(\n                            null,\n                            ingredient.ingredient_id\n                        )}\n                        key={ingredient.ingredient_id}\n                        className={props.className}\n                    />\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default GridList;\n","import React from \"react\";\n\nconst SimpleListItem = (props) => {\n    return (\n        <li key={props.key} class=\"simple-list__item\">\n            {props.name}\n        </li>\n    );\n};\n\nexport default SimpleListItem;\n","import React from \"react\";\nimport SimpleListItem from \"./SimpleListItem\";\n\nconst SimpleList = (props) => {\n    return (\n        <ul className=\"simple-list\">\n            {props.listItems.map((cocktail) => {\n                return (\n                    <SimpleListItem\n                        key={cocktail.cocktail_id}\n                        name={cocktail.cocktail_name}\n                    ></SimpleListItem>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default SimpleList;\n","import React from \"react\";\nimport SimpleList from \"../SimpleList/SimpleList\";\n\nconst RenderCocktails = (props) => {\n    return <SimpleList listItems={props.matchedCocktails}></SimpleList>;\n};\n\nexport default RenderCocktails;\n","import React from \"react\";\n\nconst Input = (props) => {\n    return (\n        <div className=\"input__wrap\">\n            <input className=\"input\" {...props.input}>\n                {props.label}\n            </input>\n        </div>\n    );\n};\n\nexport default Input;\n","import React from \"react\";\n\nconst DropdownItem = (props) => {\n    const buttonHandler = (itemId) => {\n        props.onItemClick(itemId);\n    };\n\n    return (\n        <li>\n            <button\n                type=\"button\"\n                className=\"dropdown__button\"\n                onClick={buttonHandler.bind(null, props.itemId)}\n            >\n                {props.itemName}\n            </button>\n        </li>\n    );\n};\n\nexport default DropdownItem;\n","import React from \"react\";\nimport DropdownItem from \"./DropdownItem\";\n\nconst Dropdown = (props) => {\n    return (\n        <ul className=\"dropdown\">\n            {props.dropdownItems.map((item) => {\n                return (\n                    <DropdownItem\n                        itemId={item.ingredient_id}\n                        itemName={item.ingredient_name}\n                        onItemClick={props.onItemClick}\n                        key={item.ingredient_id}\n                    ></DropdownItem>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default Dropdown;\n","import React, { useEffect, useState } from \"react\";\nimport Input from \"../Input/Input\";\nimport Dropdown from \"../Dropdown/Dropdown\";\n\nconst SearchForm = (props) => {\n    const [enteredQuery, setEnteredQuery] = useState(\"\");\n    const [matchingIngs, setMatchingIngs] = useState([]);\n\n    const inputHandler = (event) => {\n        setEnteredQuery(event.target.value.toLowerCase());\n    };\n\n    const buttonHandler = (ingredientId) => {\n        props.selectedIngs(ingredientId);\n    };\n\n    useEffect(() => {\n        let matchedItems = [];\n\n        if (!(enteredQuery === \"\" || enteredQuery === \" \")) {\n            matchedItems = props.ingredients.filter((ingredient) =>\n                ingredient.ingredient_name.toLowerCase().includes(enteredQuery)\n            );\n        }\n\n        setMatchingIngs(matchedItems);\n    }, [enteredQuery, props.ingredients]);\n\n    return (\n        <form className=\"search-form\">\n            <Input\n                input={{\n                    placeholder: \"Enter an ingredient\",\n                    onChange: inputHandler,\n                    onKeyDown: inputHandler,\n                    value: enteredQuery,\n                }}\n            ></Input>\n            {matchingIngs && matchingIngs.length !== 0 && (\n                <Dropdown\n                    onItemClick={buttonHandler}\n                    dropdownItems={matchingIngs}\n                ></Dropdown>\n            )}\n        </form>\n    );\n};\n\nexport default SearchForm;\n","import React from \"react\";\n\nconst Heading = (props) => {\n    return <h1 className=\"heading\">{props.children}</h1>;\n};\n\nexport default Heading;\n","import React from \"react\";\n\nconst Subheading = (props) => {\n    return <h2 className={props.className ? `subheading ${props.className}` : `subheading`}>{props.children}</h2>;\n};\n\nexport default Subheading;\n","import React from \"react\";\n\nconst ContentBlock = (props) => {\n    return (\n        <div\n            className={\n                props.className\n                    ? `content-block ${props.className}`\n                    : `content-block`\n            }\n        >\n            {props.children}\n        </div>\n    );\n};\n\nexport default ContentBlock;\n","import firebase from 'firebase/compat/app';\nimport 'firebase/compat/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBVVGlf7EUHV0BOpPcBg5QgJNrixyNKnmw\",\n    authDomain: \"drinks-builder.firebaseapp.com\",\n    databaseURL: \"https://drinks-builder-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"drinks-builder\",\n    storageBucket: \"drinks-builder.appspot.com\",\n    messagingSenderId: \"827979470509\",\n    appId: \"1:827979470509:web:7fcd358b83950b18009824\"\n};\n\nconst firebaseDatabase = firebase.initializeApp(firebaseConfig).database();\n\nexport default firebaseDatabase;","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GridList from \"./components/GridList/GridList\";\nimport RenderCocktails from \"./components/Misc/RenderCocktails\";\nimport cocktails from \"./data/cocktails\";\nimport SearchForm from \"./components/SearchForm/SearchForm\";\nimport Heading from \"./components/Heading/Heading\";\nimport Subheading from \"./components/Subheading/Subheading\";\nimport ContentBlock from \"./components/ContentBlock/ContentBlock\";\nimport firebaseDatabase from \"./firebase\";\n\nconst App = () => {\n    const [selectedIngredients, setSelectedIngredients] = useState([]);\n    const [notSelectedIngredients, setNotSelectedIngredients] = useState();\n    const [matchingCocktails, setMatchingCocktails] = useState([]);\n\n    useEffect(() => {\n        const ingredientsFromDatabase = firebaseDatabase.ref(\"ingredients\");\n\n        ingredientsFromDatabase.on(\"value\", (snapshot) => {\n            const ingredients = snapshot.val();\n\n            setNotSelectedIngredients(ingredients);\n        });\n    }, []);\n\n    const handleSelectedIngredients = (ingredientId) => {\n        const ingredientIndex = notSelectedIngredients.findIndex(\n            (ingredient) => ingredient.ingredient_id === ingredientId\n        );\n        const ingredient = notSelectedIngredients[ingredientIndex];\n        if (\n            !selectedIngredients.find(\n                (ingredient) => ingredient.ingredient_id === ingredientId\n            )\n        ) {\n            setSelectedIngredients((prevState) => {\n                return [...prevState, ingredient];\n            });\n\n            setNotSelectedIngredients((prevState) => {\n                const filteredIngs = prevState.filter((ingredient) => {\n                    return ingredient.ingredient_id !== ingredientId;\n                });\n\n                return filteredIngs;\n            });\n        } else {\n            setNotSelectedIngredients((prevState) => {\n                return [...prevState, ingredient];\n            });\n\n            setSelectedIngredients((prevState) => {\n                const filteredIngs = prevState.filter((ingredient) => {\n                    return ingredient.ingredient_id !== ingredientId;\n                });\n\n                return filteredIngs;\n            });\n        }\n    };\n\n    useEffect(() => {\n        const ingredientIds = [];\n        const matchedCocktails = [];\n\n        selectedIngredients.forEach((ingredient) => {\n            ingredientIds.push(ingredient.ingredient_id);\n        });\n\n        ingredientIds.sort();\n\n        cocktails.cocktails.forEach((cocktail) => {\n            cocktail.cocktail_ingredient_ids\n                .sort()\n                .every((id, index) => id === ingredientIds[index]) &&\n                matchedCocktails.push(cocktail);\n        });\n\n        setMatchingCocktails(matchedCocktails);\n    }, [selectedIngredients]);\n\n    return (\n        <div className=\"content\">\n            <Heading>\n                Cocktails\n                <sup className=\"heading__sup\">Alpha!</sup>\n            </Heading>\n            <Subheading>\n                A tool to quickly and simply find a cocktail to make with the\n                ingredients you have.\n            </Subheading>\n\n            <ContentBlock className=\"content-block--with-flex\">\n                <SearchForm\n                    selectedIngs={handleSelectedIngredients}\n                    ingredients={notSelectedIngredients}\n                ></SearchForm>\n\n                {selectedIngredients.length !== 0 && (\n                    <GridList\n                        ingredients={selectedIngredients}\n                        onClick={handleSelectedIngredients}\n                        className=\"ingredients__item\"\n                    />\n                )}\n            </ContentBlock>\n\n            {matchingCocktails.length !== 0 && (\n                <ContentBlock>\n                    <Subheading className=\"subheading--semi-bold\">\n                        Results\n                    </Subheading>\n\n                    <RenderCocktails matchedCocktails={matchingCocktails} />\n                </ContentBlock>\n            )}\n        </div>\n    );\n};\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}