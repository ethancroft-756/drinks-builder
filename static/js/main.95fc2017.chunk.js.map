{"version":3,"sources":["components/ToggleButton/ToggleButton.js","components/GridList/GridList.js","components/SelectTile/SelectTile.js","components/Misc/RenderCocktails.js","components/Input/Input.js","components/Dropdown/DropdownItem.js","components/Dropdown/Dropdown.js","components/SearchForm/SearchForm.js","components/Heading/Heading.js","components/Subheading/Subheading.js","components/ContentBlock/ContentBlock.js","firebase.js","index.js"],"names":["ToggleButton","props","className","id","type","onClick","label","GridList","gridListRef","useRef","useState","listLength","setListLength","useEffect","ingredients","length","current","scrollTop","scrollHeight","ref","map","ingredient","ingredient_id","ingredient_name","bind","SelectTile","selectTileRef","selectTileBackground","setSelectTileBackground","tileId","onMouseLeave","onMouseMove","event","tileCurrentPos","getBoundingClientRect","width","height","mouseDistanceFromLeft","nativeEvent","offsetX","mouseDistanceFromTop","offsetY","percentLeft","Math","floor","percentTop","style","background","tileType","tileLabel","RenderCocktails","matchedCocktails","cocktail","cocktail_id","cocktail_name","Input","input","DropdownItem","itemId","onItemClick","itemName","Dropdown","dropdownItems","item","SearchForm","enteredQuery","setEnteredQuery","matchingIngs","setMatchingIngs","inputHandler","target","value","toLowerCase","matchedItems","filter","includes","placeholder","onChange","onKeyDown","selectedIngs","Heading","children","Subheading","ContentBlock","firebaseDatabase","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","App","cocktails","setCocktails","selectedIngredients","setSelectedIngredients","notSelectedIngredients","setNotSelectedIngredients","matchingCocktails","setMatchingCocktails","on","snapshot","val","getIngredient","queriedState","ingredientId","ingredientIndex","findIndex","selectedIngredientIds","forEach","push","sort","cocktail_ingredient_ids","every","cocktailIngId","prevState","ReactDOM","render","document","querySelector"],"mappings":"yLAkBeA,EAfM,SAACC,GAClB,OACI,yBACIC,UAAS,wBAAmBD,EAAMC,WAClCC,GAAIF,EAAME,GACVC,KAAMH,EAAMG,KAHhB,UAKI,sBAAMC,QAASJ,EAAMI,QAASH,UAAU,sBAAxC,SACI,cAAC,IAAD,MAEJ,sBAAMA,UAAU,uBAAhB,SAAwCD,EAAMK,YCyB3CC,EAlCE,SAACN,GACd,IAAMO,EAAcC,mBADI,EAEYC,mBAAS,GAFrB,mBAEjBC,EAFiB,KAELC,EAFK,KAcxB,OAVAC,qBAAU,WACFF,IAAeV,EAAMa,YAAYC,SAC7BJ,EAAaV,EAAMa,YAAYC,SAC/BP,EAAYQ,QAAQC,UAChBT,EAAYQ,QAAQE,cAE5BN,EAAcX,EAAMa,YAAYC,WAErC,CAACd,EAAMa,YAAaH,IAGnB,oBAAIQ,IAAKX,EAAaN,UAAU,YAAhC,SACKD,EAAMa,YAAYM,KAAI,SAACC,GAAD,OACnB,oBAAmCnB,UAAU,kBAA7C,SACI,cAAC,EAAD,CACIC,GAAIkB,EAAWC,cACfhB,MAAOe,EAAWE,gBAClBlB,QAASJ,EAAMI,QAAQmB,KACnB,KACAH,EAAWC,eAGfpB,UAAWD,EAAMC,WADZmB,EAAWC,gBARfD,EAAWC,qBCwBrBG,EA1CI,SAACxB,GAChB,IAAMyB,EAAgBjB,mBADI,EAE8BC,mBAAS,IAFvC,mBAEnBiB,EAFmB,KAEGC,EAFH,KAuB1B,OACI,wBACI1B,UACID,EAAMC,UAAN,sBACqBD,EAAMC,WAD3B,cAIJC,GAAIF,EAAM4B,OACVC,aA3BuB,WAC3BF,EAAwB,KA2BpBG,YAxBuB,SAACC,GAC5B,IAAIC,EAAiBP,EAAcV,QAAQkB,wBACrCC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,OAETC,EAAwBL,EAAMM,YAAYC,QAC1CC,EAAuBR,EAAMM,YAAYG,QAEzCC,EAAcC,KAAKC,MAAOP,EAAwBF,EAAS,KAC3DU,EAAaF,KAAKC,MAAOJ,EAAuBJ,EAAU,KAE9DR,EAAwB,6BAAD,OACUc,EADV,aAC0BG,EAD1B,kCAenB1B,IAAKO,EACLoB,MAAO,CAAEC,WAAW,GAAD,OAAKpB,IACxBvB,KAAMH,EAAM+C,SAXhB,SAaK/C,EAAMgD,aC5BJC,EATS,SAACjD,GACrB,OAAOA,EAAMkD,iBAAiB/B,KAAI,SAACgC,GAAD,OAC9B,cAAC,EAAD,CACIvB,OAAQuB,EAASC,YACjBJ,UAAWG,EAASE,oB,QCKjBC,EAVD,SAACtD,GACX,OACI,qBAAKC,UAAU,cAAf,SACI,+CAAOA,UAAU,SAAYD,EAAMuD,OAAnC,aACKvD,EAAMK,YCcRmD,EAlBM,SAACxD,GAKlB,OACI,6BACI,wBACIG,KAAK,SACLF,UAAU,mBACVG,QATU,SAACqD,GACnBzD,EAAM0D,YAAYD,IAQalC,KAAK,KAAMvB,EAAMyD,QAH5C,SAKKzD,EAAM2D,cCMRC,EAjBE,SAAC5D,GACd,OACI,oBAAIC,UAAU,WAAd,SACKD,EAAM6D,cAAc1C,KAAI,SAAC2C,GACtB,OACI,cAAC,EAAD,CACIL,OAAQK,EAAKzC,cACbsC,SAAUG,EAAKxC,gBACfoC,YAAa1D,EAAM0D,aACdI,EAAKzC,qBCgCnB0C,EAxCI,SAAC/D,GAAW,IAAD,EACcS,mBAAS,IADvB,mBACnBuD,EADmB,KACLC,EADK,OAEcxD,mBAAS,IAFvB,mBAEnByD,EAFmB,KAELC,EAFK,KAIpBC,EAAe,SAACrC,GAClBkC,EAAgBlC,EAAMsC,OAAOC,MAAMC,gBAevC,OAZA3D,qBAAU,WACN,IAAI4D,EAAe,GAEI,KAAjBR,GAAwC,MAAjBA,IACzBQ,EAAexE,EAAMa,YAAY4D,QAAO,SAACrD,GAAD,OACpCA,EAAWE,gBAAgBiD,cAAcG,SAASV,OAI1DG,EAAgBK,KACjB,CAACR,EAAchE,EAAMa,cAGpB,uBAAMZ,UAAU,cAAhB,UACI,cAAC,EAAD,CACIsD,MAAO,CACHoB,YAAa,sBACbC,SAAUR,EACVS,UAAWT,EACXE,MAAON,KAGdE,GAAwC,IAAxBA,EAAapD,QAC1B,cAAC,EAAD,CACI4C,YAAa1D,EAAM8E,aACnBjB,cAAeK,QC/BpBa,EAJC,SAAC/E,GACb,OAAO,oBAAIC,UAAU,UAAd,SAAyBD,EAAMgF,YCG3BC,EAJI,SAACjF,GAChB,OAAO,oBAAIC,UAAWD,EAAMC,UAAN,qBAAgCD,EAAMC,WAAtC,aAAf,SAAkFD,EAAMgF,YCapFE,EAdM,SAAClF,GAClB,OACI,qBACIC,UACID,EAAMC,UAAN,wBACuBD,EAAMC,WAD7B,gBAFR,SAOKD,EAAMgF,Y,QCIJG,G,MAFUC,IAASC,cAVX,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wEACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAGqDC,YCH1DC,EAAM,WAAO,IAAD,EACoBrF,mBAAS,IAD7B,mBACPsF,EADO,KACIC,EADJ,OAEwCvF,mBAAS,IAFjD,mBAEPwF,EAFO,KAEcC,EAFd,OAG8CzF,mBAAS,IAHvD,mBAGP0F,EAHO,KAGiBC,EAHjB,OAIoC3F,mBAAS,IAJ7C,mBAIP4F,EAJO,KAIYC,EAJZ,KAMd1F,qBAAU,WACNuE,EAAiBjE,IAAI,eAAeqF,GAAG,SAAS,SAACC,GAC7C,IAAM3F,EAAc2F,EAASC,MAE7BL,EAA0BvF,MAG9BsE,EAAiBjE,IAAI,aAAaqF,GAAG,SAAS,SAACC,GAC3C,IAAMT,EAAYS,EAASC,MAE3BT,EAAaD,QAElB,IAGH,IAgCMW,EAAgB,SAACC,EAAcC,GACjC,IAAIC,EAAkBF,EAAaG,WAC/B,SAAC1F,GAAD,OAAgBA,EAAWC,gBAAkBuF,KAGjD,OAAOD,EAAaE,IAwBxB,OArBAjG,qBAAU,WACN,IAAMmG,EAAwB,GACxB7D,EAAmB,GAEzB+C,EAAoBe,SAAQ,SAAC5F,GACzB2F,EAAsBE,KAAK7F,EAAWC,kBAG1C0F,EAAsBG,OAEtBnB,EAAUiB,SAAQ,SAAC7D,GACfA,EAASgE,wBACJD,OACAE,OAAM,SAACC,GAAD,OACHN,EAAsBrC,SAAS2C,OAC9BnE,EAAiB+D,KAAK9D,MAGnCmD,EAAqBpD,KACtB,CAAC+C,EAAqBF,IAGrB,sBAAK9F,UAAU,UAAf,UACI,eAAC,EAAD,uBAEI,qBAAKA,UAAU,eAAf,uBAEJ,cAAC,EAAD,kGAKA,eAAC,EAAD,CAAcA,UAAU,2BAAxB,UACI,cAAC,EAAD,CACI6E,aA1EsB,SAAC8B,GACnC,IAAMxF,EAAasF,EAAcP,EAAwBS,GAEzDV,GAAuB,SAACoB,GACpB,MAAM,GAAN,mBAAWA,GAAX,CAAsBlG,OAG1BgF,GAA0B,SAACkB,GAKvB,OAJqBA,EAAU7C,QAAO,SAACrD,GACnC,OAAOA,EAAWC,gBAAkBuF,SAkEhC/F,YAAasF,IAGe,IAA/BF,EAAoBnF,QACjB,cAAC,EAAD,CACID,YAAaoF,EACb7F,QAjEoB,SAACwG,GACrC,IAAMxF,EAAasF,EAAcT,EAAqBW,GAEtDR,GAA0B,SAACkB,GACvB,MAAM,GAAN,mBAAWA,GAAX,CAAsBlG,OAG1B8E,GAAuB,SAACoB,GAKpB,OAJqBA,EAAU7C,QAAO,SAACrD,GACnC,OAAOA,EAAWC,gBAAkBuF,SAyD5B3G,UAAU,yBAKQ,IAA7BoG,EAAkBvF,QACf,eAAC,EAAD,WACI,cAAC,EAAD,CAAYb,UAAU,wBAAtB,qBAIA,cAAC,EAAD,CAAiBiD,iBAAkBmD,WAOvDkB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.95fc2017.chunk.js","sourcesContent":["import React from \"react\";\nimport { FaMinusCircle } from \"react-icons/fa\";\n\nconst ToggleButton = (props) => {\n    return (\n        <button\n            className={`toggle-button ${props.className}`}\n            id={props.id}\n            type={props.type}\n        >\n            <span onClick={props.onClick} className=\"toggle-button__icon\">\n                <FaMinusCircle></FaMinusCircle>\n            </span>\n            <span className=\"toggle-button__label\">{props.label}</span>\n        </button>\n    );\n};\n\nexport default ToggleButton;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport ToggleButton from \"../ToggleButton/ToggleButton\";\n\n/* Refactor to not use ingredients within component but as a prop */\nconst GridList = (props) => {\n    const gridListRef = useRef();\n    const [listLength, setListLength] = useState(0);\n\n    useEffect(() => {\n        if (listLength !== props.ingredients.length) {\n            if (listLength < props.ingredients.length) {\n                gridListRef.current.scrollTop =\n                    gridListRef.current.scrollHeight;\n            }\n            setListLength(props.ingredients.length);\n        }\n    }, [props.ingredients, listLength]);\n\n    return (\n        <ul ref={gridListRef} className=\"grid-list\">\n            {props.ingredients.map((ingredient) => (\n                <li key={ingredient.ingredient_id} className=\"grid-list__item\">\n                    <ToggleButton\n                        id={ingredient.ingredient_id}\n                        label={ingredient.ingredient_name}\n                        onClick={props.onClick.bind(\n                            null,\n                            ingredient.ingredient_id\n                        )}\n                        key={ingredient.ingredient_id}\n                        className={props.className}\n                    />\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default GridList;\n","import React, { useRef, useState } from \"react\";\nimport { FaMinusCircle } from \"react-icons/fa\";\n\nconst SelectTile = (props) => {\n    const selectTileRef = useRef();\n    const [selectTileBackground, setSelectTileBackground] = useState(\"\");\n\n    const removeBackgroundEffect = () => {\n        setSelectTileBackground(\"\");\n    };\n\n    const createBackgroundEffect = (event) => {\n        let tileCurrentPos = selectTileRef.current.getBoundingClientRect();\n        let { width, height } = tileCurrentPos;\n\n        let mouseDistanceFromLeft = event.nativeEvent.offsetX;\n        let mouseDistanceFromTop = event.nativeEvent.offsetY;\n\n        let percentLeft = Math.floor((mouseDistanceFromLeft / width) * 100);\n        let percentTop = Math.floor((mouseDistanceFromTop / height) * 100);\n\n        setSelectTileBackground(\n            `radial-gradient(circle at ${percentLeft}% ${percentTop}%, #f7d9ee 1%, #f8bae6 100%)`\n        );\n    };\n\n    return (\n        <button\n            className={\n                props.className\n                    ? `select-tile ${props.className}`\n                    : `select-tile`\n            }\n            id={props.tileId}\n            onMouseLeave={removeBackgroundEffect}\n            onMouseMove={createBackgroundEffect}\n            ref={selectTileRef}\n            style={{ background: `${selectTileBackground}` }}\n            type={props.tileType}\n        >\n            {props.tileLabel}\n        </button>\n    );\n};\n\nexport default SelectTile;\n","import React from \"react\";\nimport SelectTile from \"../SelectTile/SelectTile\";\n\nconst RenderCocktails = (props) => {\n    return props.matchedCocktails.map((cocktail) => (\n        <SelectTile\n            tileId={cocktail.cocktail_id}\n            tileLabel={cocktail.cocktail_name}\n        ></SelectTile>\n    ));\n};\n\nexport default RenderCocktails;\n","import React from \"react\";\n\nconst Input = (props) => {\n    return (\n        <div className=\"input__wrap\">\n            <input className=\"input\" {...props.input}>\n                {props.label}\n            </input>\n        </div>\n    );\n};\n\nexport default Input;\n","import React from \"react\";\n\nconst DropdownItem = (props) => {\n    const buttonHandler = (itemId) => {\n        props.onItemClick(itemId);\n    };\n\n    return (\n        <li>\n            <button\n                type=\"button\"\n                className=\"dropdown__button\"\n                onClick={buttonHandler.bind(null, props.itemId)}\n            >\n                {props.itemName}\n            </button>\n        </li>\n    );\n};\n\nexport default DropdownItem;\n","import React from \"react\";\nimport DropdownItem from \"./DropdownItem\";\n\nconst Dropdown = (props) => {\n    return (\n        <ul className=\"dropdown\">\n            {props.dropdownItems.map((item) => {\n                return (\n                    <DropdownItem\n                        itemId={item.ingredient_id}\n                        itemName={item.ingredient_name}\n                        onItemClick={props.onItemClick}\n                        key={item.ingredient_id}\n                    ></DropdownItem>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default Dropdown;\n","import React, { useEffect, useState } from \"react\";\nimport Input from \"../Input/Input\";\nimport Dropdown from \"../Dropdown/Dropdown\";\n\nconst SearchForm = (props) => {\n    const [enteredQuery, setEnteredQuery] = useState(\"\");\n    const [matchingIngs, setMatchingIngs] = useState([]);\n\n    const inputHandler = (event) => {\n        setEnteredQuery(event.target.value.toLowerCase());\n    };\n\n    useEffect(() => {\n        let matchedItems = [];\n\n        if (!(enteredQuery === \"\" || enteredQuery === \" \")) {\n            matchedItems = props.ingredients.filter((ingredient) =>\n                ingredient.ingredient_name.toLowerCase().includes(enteredQuery)\n            );\n        }\n\n        setMatchingIngs(matchedItems);\n    }, [enteredQuery, props.ingredients]);\n\n    return (\n        <form className=\"search-form\">\n            <Input\n                input={{\n                    placeholder: \"Enter an ingredient\",\n                    onChange: inputHandler,\n                    onKeyDown: inputHandler,\n                    value: enteredQuery,\n                }}\n            ></Input>\n            {matchingIngs && matchingIngs.length !== 0 && (\n                <Dropdown\n                    onItemClick={props.selectedIngs}\n                    dropdownItems={matchingIngs}\n                ></Dropdown>\n            )}\n        </form>\n    );\n};\n\nexport default SearchForm;\n","import React from \"react\";\n\nconst Heading = (props) => {\n    return <h1 className=\"heading\">{props.children}</h1>;\n};\n\nexport default Heading;\n","import React from \"react\";\n\nconst Subheading = (props) => {\n    return <h2 className={props.className ? `subheading ${props.className}` : `subheading`}>{props.children}</h2>;\n};\n\nexport default Subheading;\n","import React from \"react\";\n\nconst ContentBlock = (props) => {\n    return (\n        <div\n            className={\n                props.className\n                    ? `content-block ${props.className}`\n                    : `content-block`\n            }\n        >\n            {props.children}\n        </div>\n    );\n};\n\nexport default ContentBlock;\n","import firebase from 'firebase/compat/app';\nimport 'firebase/compat/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBVVGlf7EUHV0BOpPcBg5QgJNrixyNKnmw\",\n    authDomain: \"drinks-builder.firebaseapp.com\",\n    databaseURL: \"https://drinks-builder-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"drinks-builder\",\n    storageBucket: \"drinks-builder.appspot.com\",\n    messagingSenderId: \"827979470509\",\n    appId: \"1:827979470509:web:7fcd358b83950b18009824\"\n};\n\nconst firebaseDatabase = firebase.initializeApp(firebaseConfig).database();\n\nexport default firebaseDatabase;","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GridList from \"./components/GridList/GridList\";\nimport RenderCocktails from \"./components/Misc/RenderCocktails\";\nimport SearchForm from \"./components/SearchForm/SearchForm\";\nimport Heading from \"./components/Heading/Heading\";\nimport Subheading from \"./components/Subheading/Subheading\";\nimport ContentBlock from \"./components/ContentBlock/ContentBlock\";\nimport firebaseDatabase from \"./firebase\";\n\nconst App = () => {\n    const [cocktails, setCocktails] = useState([]);\n    const [selectedIngredients, setSelectedIngredients] = useState([]);\n    const [notSelectedIngredients, setNotSelectedIngredients] = useState([]);\n    const [matchingCocktails, setMatchingCocktails] = useState([]);\n\n    useEffect(() => {\n        firebaseDatabase.ref(\"ingredients\").on(\"value\", (snapshot) => {\n            const ingredients = snapshot.val();\n\n            setNotSelectedIngredients(ingredients);\n        });\n\n        firebaseDatabase.ref(\"cocktails\").on(\"value\", (snapshot) => {\n            const cocktails = snapshot.val();\n\n            setCocktails(cocktails);\n        });\n    }, []);\n\n    // TODO: How can I consolidate these functions?\n    const manageAddedSelectedIngredient = (ingredientId) => {\n        const ingredient = getIngredient(notSelectedIngredients, ingredientId);\n\n        setSelectedIngredients((prevState) => {\n            return [...prevState, ingredient];\n        });\n\n        setNotSelectedIngredients((prevState) => {\n            const filteredIngs = prevState.filter((ingredient) => {\n                return ingredient.ingredient_id !== ingredientId;\n            });\n\n            return filteredIngs;\n        });\n    };\n\n    const manageRemovedSelectedIngredient = (ingredientId) => {\n        const ingredient = getIngredient(selectedIngredients, ingredientId);\n\n        setNotSelectedIngredients((prevState) => {\n            return [...prevState, ingredient];\n        });\n\n        setSelectedIngredients((prevState) => {\n            const filteredIngs = prevState.filter((ingredient) => {\n                return ingredient.ingredient_id !== ingredientId;\n            });\n\n            return filteredIngs;\n        });\n    };\n\n    const getIngredient = (queriedState, ingredientId) => {\n        let ingredientIndex = queriedState.findIndex(\n            (ingredient) => ingredient.ingredient_id === ingredientId\n        );\n\n        return queriedState[ingredientIndex];\n    };\n\n    useEffect(() => {\n        const selectedIngredientIds = [];\n        const matchedCocktails = [];\n\n        selectedIngredients.forEach((ingredient) => {\n            selectedIngredientIds.push(ingredient.ingredient_id);\n        });\n\n        selectedIngredientIds.sort();\n\n        cocktails.forEach((cocktail) => {\n            cocktail.cocktail_ingredient_ids\n                .sort()\n                .every((cocktailIngId) =>\n                    selectedIngredientIds.includes(cocktailIngId)\n                ) && matchedCocktails.push(cocktail);\n        });\n\n        setMatchingCocktails(matchedCocktails);\n    }, [selectedIngredients, cocktails]);\n\n    return (\n        <div className=\"content\">\n            <Heading>\n                Cocktails\n                <sup className=\"heading__sup\">Alpha!</sup>\n            </Heading>\n            <Subheading>\n                A tool to quickly and simply find a cocktail to make with the\n                ingredients you have.\n            </Subheading>\n\n            <ContentBlock className=\"content-block--with-flex\">\n                <SearchForm\n                    selectedIngs={manageAddedSelectedIngredient}\n                    ingredients={notSelectedIngredients}\n                ></SearchForm>\n\n                {selectedIngredients.length !== 0 && (\n                    <GridList\n                        ingredients={selectedIngredients}\n                        onClick={manageRemovedSelectedIngredient}\n                        className=\"ingredients__item\"\n                    />\n                )}\n            </ContentBlock>\n\n            {matchingCocktails.length !== 0 && (\n                <ContentBlock>\n                    <Subheading className=\"subheading--semi-bold\">\n                        Results\n                    </Subheading>\n\n                    <RenderCocktails matchedCocktails={matchingCocktails} />\n                </ContentBlock>\n            )}\n        </div>\n    );\n};\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}