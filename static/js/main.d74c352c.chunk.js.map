{"version":3,"sources":["components/ToggleButton/ToggleButton.js","components/GridList/GridList.js","components/SimpleList/SimpleListItem.js","components/SimpleList/SimpleList.js","components/RenderCocktails.js","components/Input/Input.js","components/SearchForm/SearchForm.js","components/Heading/Heading.js","components/Subheading/Subheading.js","components/ContentBlock/ContentBlock.js","index.js"],"names":["ToggleButton","props","className","id","type","onClick","label","GridList","gridListRef","useRef","useState","listLength","setListLength","useEffect","ingredients","length","current","scrollTop","scrollHeight","ref","map","ingredient","ingredient_id","ingredient_name","bind","SimpleListItem","class","name","key","SimpleList","listItems","cocktail","cocktail_name","cocktail_id","RenderCocktails","matchedCocktails","Input","input","SearchForm","enteredQuery","setEnteredQuery","matchingIngs","setMatchingIngs","inputHandler","event","target","value","toLowerCase","matchedItems","filter","includes","placeholder","onChange","onKeyDown","item","ingredientId","selectedIngs","Heading","children","Subheading","ContentBlock","App","selectedIngredients","setSelectedIngredients","notSelectedIngredients","setNotSelectedIngredients","matchingCocktails","setMatchingCocktails","handleSelectedIngredients","ingredientIndex","findIndex","find","prevState","ingredientIds","forEach","push","sort","cocktails","cocktail_ingredient_ids","every","index","style","fontSize","transform","display","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.d74c352c.chunk.js","sourcesContent":["import React from \"react\";\nimport { FaMinusCircle } from \"react-icons/fa\";\n\nconst ToggleButton = (props) => {\n    const handleClicks = () => {\n        props.onClick(true);\n    };\n\n    return (\n        <button\n            className={`toggle-button ${props.className}`}\n            id={props.id}\n            type={props.type}\n        >\n            <span onClick={handleClicks} className=\"toggle-button__icon\">\n                <FaMinusCircle></FaMinusCircle>\n            </span>\n            <span className=\"toggle-button__label\">{props.label}</span>\n        </button>\n    );\n};\n\nexport default ToggleButton;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport ToggleButton from \"../ToggleButton/ToggleButton\";\n\nconst GridList = (props) => {\n    const gridListRef = useRef();\n    const [listLength, setListLength] = useState(0);\n\n    useEffect(() => {\n        if (listLength !== props.ingredients.length) {\n            if (listLength < props.ingredients.length) {\n                gridListRef.current.scrollTop =\n                    gridListRef.current.scrollHeight;\n            }\n            setListLength(props.ingredients.length);\n        }\n    }, [props.ingredients, listLength]);\n\n    return (\n        <ul ref={gridListRef} className=\"grid-list\">\n            {props.ingredients.map((ingredient) => (\n                <li key={ingredient.ingredient_id} className=\"grid-list__item\">\n                    <ToggleButton\n                        id={ingredient.ingredient_id}\n                        label={ingredient.ingredient_name}\n                        onClick={props.onClick.bind(\n                            null,\n                            ingredient.ingredient_id\n                        )}\n                        key={ingredient.ingredient_id}\n                        className={props.className}\n                    />\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default GridList;\n","import React from \"react\";\n\nconst SimpleListItem = (props) => {\n    return (\n        <li key={props.key} class=\"simple-list__item\">\n            {props.name}\n        </li>\n    );\n};\n\nexport default SimpleListItem;\n","import React from \"react\";\nimport SimpleListItem from \"./SimpleListItem\";\n\nconst SimpleList = (props) => {\n    return (\n        <ul className=\"simple-list\">\n            {props.listItems.map((cocktail) => {\n                return (\n                    <SimpleListItem\n                        key={cocktail.cocktail_id}\n                        name={cocktail.cocktail_name}\n                    ></SimpleListItem>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default SimpleList;\n","import React from \"react\";\nimport SimpleList from \"./SimpleList/SimpleList\";\n\nconst RenderCocktails = (props) => {\n    return (\n        <SimpleList listItems={props.matchedCocktails}></SimpleList>\n    );\n};\n\nexport default RenderCocktails;\n","import React from \"react\";\n\nconst Input = (props) => {\n    return (\n        <div className=\"input__wrap\">\n            <input className=\"input\" {...props.input}>\n                {props.label}\n            </input>\n        </div>\n    );\n};\n\nexport default Input;\n","import React, { useEffect, useState } from \"react\";\nimport Input from \"../Input/Input\";\n\nconst SearchForm = (props) => {\n    const [enteredQuery, setEnteredQuery] = useState(\"\");\n    const [matchingIngs, setMatchingIngs] = useState([]);\n\n    const inputHandler = (event) => {\n        setEnteredQuery(event.target.value.toLowerCase());\n    };\n\n    const buttonHandler = (event, ingredientId) => {\n        props.selectedIngs(ingredientId);\n    };\n\n    useEffect(() => {\n        let matchedItems = [];\n\n        if (!(enteredQuery === \"\" || enteredQuery === \" \")) {\n            matchedItems = props.ingredients.filter((ingredient) =>\n                ingredient.ingredient_name.toLowerCase().includes(enteredQuery)\n            );\n        }\n\n        setMatchingIngs(matchedItems);\n    }, [enteredQuery, props.ingredients]);\n\n    return (\n        <form className=\"search-form\">\n            <Input\n                input={{\n                    placeholder: \"Enter an ingredient\",\n                    onChange: inputHandler,\n                    onKeyDown: inputHandler,\n                    value: enteredQuery,\n                }}\n            ></Input>\n            <ul className=\"dropdown\">\n                {matchingIngs &&\n                    matchingIngs.length !== 0 &&\n                    matchingIngs.map((item) => {\n                        return (\n                            <li key={item.ingredient_id}>\n                                <button\n                                    type=\"button\"\n                                    className=\"dropdown__button\"\n                                    onClick={(event) =>\n                                        buttonHandler(event, item.ingredient_id)\n                                    }\n                                >\n                                    {item.ingredient_name}\n                                </button>\n                            </li>\n                        );\n                    })}\n            </ul>\n        </form>\n    );\n};\n\nexport default SearchForm;\n","import React from \"react\";\n\nconst Heading = (props) => {\n    return <h1 className=\"heading\">{props.children}</h1>;\n};\n\nexport default Heading;\n","import React from \"react\";\n\nconst Subheading = (props) => {\n    return <h2 className={props.className ? `subheading ${props.className}` : `subheading`}>{props.children}</h2>;\n};\n\nexport default Subheading;\n","import React from \"react\";\n\nconst ContentBlock = (props) => {\n    return (\n        <div\n            className={\n                props.className\n                    ? `content-block ${props.className}`\n                    : `content-block`\n            }\n        >\n            {props.children}\n        </div>\n    );\n};\n\nexport default ContentBlock;\n","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GridList from \"./components/GridList/GridList\";\nimport RenderCocktails from \"./components/RenderCocktails\";\nimport cocktails from \"./data/cocktails\";\nimport ingredients from \"./data/ingredients\";\nimport SearchForm from \"./components/SearchForm/SearchForm\";\nimport Heading from \"./components/Heading/Heading\";\nimport Subheading from \"./components/Subheading/Subheading\";\nimport ContentBlock from \"./components/ContentBlock/ContentBlock\";\n\nconst App = () => {\n    const [selectedIngredients, setSelectedIngredients] = useState([]);\n    const [notSelectedIngredients, setNotSelectedIngredients] = useState(\n        ingredients.ingredients\n    );\n    const [matchingCocktails, setMatchingCocktails] = useState([]);\n\n    const handleSelectedIngredients = (ingredientId) => {\n        const ingredientIndex = ingredients.ingredients.findIndex(\n            (ingredient) => ingredient.ingredient_id === ingredientId\n        );\n        const ingredient = ingredients.ingredients[ingredientIndex];\n\n        if (\n            !selectedIngredients.find(\n                (ingredient) => ingredient.ingredient_id === ingredientId\n            )\n        ) {\n            setSelectedIngredients((prevState) => {\n                return [...prevState, ingredient];\n            });\n\n            setNotSelectedIngredients((prevState) => {\n                const filteredIngs = prevState.filter((ingredient) => {\n                    return ingredient.ingredient_id !== ingredientId;\n                });\n\n                return filteredIngs;\n            });\n        } else {\n            setNotSelectedIngredients((prevState) => {\n                return [...prevState, ingredient];\n            });\n\n            setSelectedIngredients((prevState) => {\n                const filteredIngs = prevState.filter((ingredient) => {\n                    return ingredient.ingredient_id !== ingredientId;\n                });\n\n                return filteredIngs;\n            });\n        }\n    };\n\n    useEffect(() => {\n        const ingredientIds = [];\n        const matchedCocktails = [];\n\n        selectedIngredients.forEach((ingredient) => {\n            ingredientIds.push(ingredient.ingredient_id);\n        });\n\n        ingredientIds.sort();\n\n        cocktails.cocktails.forEach((cocktail) => {\n            cocktail.cocktail_ingredient_ids\n                .sort()\n                .every((id, index) => id === ingredientIds[index]) &&\n                matchedCocktails.push(cocktail);\n        });\n\n        setMatchingCocktails(matchedCocktails);\n    }, [selectedIngredients]);\n\n    return (\n        <div className=\"content\">\n            <Heading>\n                Cocktails\n                <sup\n                    style={{\n                        fontSize: \"16px\",\n                        transform: \"rotateZ(10deg)\",\n                        display: \"inline-block\",\n                    }}\n                >\n                    Alpha!\n                </sup>\n            </Heading>\n            <Subheading>\n                A tool to quickly and simply find a cocktail to make with the\n                ingredients you have.\n            </Subheading>\n\n            <ContentBlock className=\"content-block--with-flex\">\n                <SearchForm\n                    selectedIngs={handleSelectedIngredients}\n                    ingredients={notSelectedIngredients}\n                ></SearchForm>\n\n                {selectedIngredients.length !== 0 && (\n                    <GridList\n                        ingredients={selectedIngredients}\n                        onClick={handleSelectedIngredients}\n                        className=\"ingredients__item\"\n                    />\n                )}\n            </ContentBlock>\n\n            {matchingCocktails.length !== 0 && (\n                <ContentBlock>\n                    <Subheading className=\"subheading--semi-bold\">Results</Subheading>\n\n                    <RenderCocktails matchedCocktails={matchingCocktails} />\n                </ContentBlock>\n            )}\n        </div>\n    );\n};\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}