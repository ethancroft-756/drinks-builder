{"version":3,"sources":["components/ToggleButton/ToggleButton.js","components/GridList/GridList.js","components/CocktailShort.js","components/CocktailModal.js","components/RenderCocktails.js","components/Input/Input.js","components/SearchForm/SearchForm.js","components/Heading/Heading.js","components/Subheading/Subheading.js","index.js"],"names":["ToggleButton","props","useState","buttonScalingSetting","setButtonScalingSetting","useEffect","className","id","type","label","onClick","console","log","GridList","ingredients","map","ingredient","ingredient_id","ingredient_name","bind","CocktailShort","React","Component","name","RenderCocktails","matchedCocktails","cocktail","index","cocktail_name","Input","input","SearchForm","enteredQuery","setEnteredQuery","matchingIngs","setMatchingIngs","inputHandler","event","target","value","toLowerCase","matchedItems","filter","includes","placeholder","onChange","onKeyDown","length","item","ingredientId","selectedIngs","Heading","children","Subheading","App","selectedIngredients","setSelectedIngredients","notSelectedIngredients","setNotSelectedIngredients","matchingCocktails","setMatchingCocktails","handleSelectedIngredients","ingredientIndex","findIndex","find","prevState","ingredientIds","forEach","push","sort","cocktails","cocktail_ingredient_ids","every","style","display","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.d7dcd415.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { FaMinusCircle } from \"react-icons/fa\";\n\nconst ToggleButton = (props) => {\n    const [buttonScalingSetting, setButtonScalingSetting] = useState(true);\n\n    const handleClicks = () => {\n        // buttonScalingSetting ? setButtonScalingSetting(false) : setButtonScalingSetting(true);\n        setButtonScalingSetting(false);\n        console.log(buttonScalingSetting);\n        props.onClick(true);\n    }\n\n    useEffect(() => {\n        setButtonScalingSetting(true);\n    });\n\n    return (\n        <button\n            className={`toggle-button toggle-button${buttonScalingSetting ? \"--scale-up\" : \"--scale-down\"} ${props.className}`}\n            id={props.id}\n            type={props.type}\n        >\n            {props.label}\n            <span onClick={handleClicks} className=\"toggle-button__icon\">\n                <FaMinusCircle></FaMinusCircle>\n            </span>\n        </button>\n    );\n};\n\nexport default ToggleButton;\n","import React from \"react\";\nimport ToggleButton from \"../ToggleButton/ToggleButton\";\n\nconst GridList = (props) => {\n    return (\n        <ul className=\"grid-list\">\n            {props.ingredients.map((ingredient) => (\n                <li className=\"grid-list__item\">\n                    <ToggleButton\n                        id={ingredient.ingredient_id}\n                        label={ingredient.ingredient_name}\n                        onClick={props.onClick.bind(\n                            null,\n                            ingredient.ingredient_id\n                        )}\n                        key={ingredient.ingredient_id}\n                        className={props.className}\n                    />\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default GridList;\n","import React from \"react\";\nimport CocktailModal from \"./CocktailModal\";\n\nconst CocktailShort = (props) => {\n    // const handleClick = () {\n    //     this.state.modalActive === true\n    //         ? this.setState({\n    //               modalActive: false,\n    //           })\n    //         : this.setState({\n    //               modalActive: true,\n    //           });\n    // }\n\n    return (\n        <p>{props.name}</p>\n        // return cocktails.cocktails.map((cocktail) => {\n        //     if (cocktail.cocktail_id === this.props.cocktailId) {\n        //         return (\n        //             <div key={cocktail.cocktail_id}>\n        //                 <button onClick={this.handleClick}>\n        //                     {cocktail.cocktail_name}\n        //                 </button>\n\n        //                 <CocktailModal\n        //                     isActive={this.state.modalActive}\n        //                     closeModal={this.handleClick}\n        //                     cocktailName={cocktail.cocktail_name}\n        //                     cocktailId={cocktail.cocktail_id}\n        //                     key={cocktail.cocktail_id}\n        //                 />\n        //             </div>\n        //         );\n        //     }\n        // });\n    );\n};\n\nexport default CocktailShort;\n","import React from 'react';\nimport { FaTimes } from 'react-icons/fa';\n\nclass CocktailModal extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { isActive: this.props.isActive };\n    }\n\n    componentDidMount() {\n        this.modal = document.querySelector(\n            `[cocktail-id=\"${this.props.cocktailId}\"]`\n        );\n    }\n\n    componentDidUpdate() {\n        this.props.isActive === true\n            ? this.modal.classList.add('modal--active')\n            : this.modal.classList.remove('modal--active');\n    }\n\n    render() {\n        return (\n            <div cocktail-id={this.props.cocktailId} className=\"modal\">\n                <p>Name: {this.props.cocktailName}</p>\n                <p>Cocktail ID: {this.props.cocktailId}</p>\n\n                <span>\n                    <FaTimes onClick={this.props.closeModal} />\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default CocktailModal;\n","import React from \"react\";\nimport CocktailShort from \"./CocktailShort\";\n\nconst RenderCocktails = (props) => {\n    return (\n        <ul>\n            {props.matchedCocktails.map((cocktail, index) => {\n                return (\n                    <li key={index}>\n                        <CocktailShort name={cocktail.cocktail_name} />\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default RenderCocktails;\n","import React from \"react\";\n\nconst Input = (props) => {\n    return (\n        <div className=\"input__wrap\">\n            <input className=\"input\" {...props.input}>\n                {props.label}\n            </input>\n        </div>\n    );\n};\n\nexport default Input;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport Input from \"../Input/Input\";\n\nconst SearchForm = (props) => {\n    const [enteredQuery, setEnteredQuery] = useState(\"\");\n    const [matchingIngs, setMatchingIngs] = useState([]);\n\n    const inputHandler = (event) => {\n        setEnteredQuery(event.target.value.toLowerCase());\n    };\n\n    const buttonHandler = (event, ingredientId) => {\n        props.selectedIngs(ingredientId);\n    };\n\n    useEffect(() => {\n        let matchedItems = [];\n\n        if (!(enteredQuery === \"\" || enteredQuery === \" \")) {\n            matchedItems = props.ingredients.filter((ingredient) =>\n                ingredient.ingredient_name.toLowerCase().includes(enteredQuery)\n            );\n        }\n\n        setMatchingIngs(matchedItems);\n    }, [enteredQuery, props.ingredients]);\n\n    return (\n        <form className=\"search-form\">\n            <Input\n                input={{\n                    placeholder: \"Enter an ingredient\",\n                    onChange: inputHandler,\n                    onKeyDown: inputHandler,\n                    value: enteredQuery,\n                }}\n            ></Input>\n            <ul className=\"dropdown\">\n                {matchingIngs &&\n                    matchingIngs.length !== 0 &&\n                    matchingIngs.map((item) => {\n                        return (\n                            <li key={item.ingredient_id}>\n                                <button\n                                    type=\"button\"\n                                    className=\"dropdown__button\"\n                                    onClick={(event) =>\n                                        buttonHandler(event, item.ingredient_id)\n                                    }\n                                >\n                                    {item.ingredient_name}\n                                </button>\n                            </li>\n                        );\n                    })}\n            </ul>\n        </form>\n    );\n};\n\nexport default SearchForm;\n","import React from \"react\";\n\nconst Heading = (props) => {\n    return <h1 className=\"heading\">{props.children}</h1>;\n};\n\nexport default Heading;\n","import React from \"react\";\n\nconst Subheading = (props) => {\n    return <h2 className=\"subheading\">{props.children}</h2>;\n};\n\nexport default Subheading;\n","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GridList from \"./components/GridList/GridList\";\nimport RenderCocktails from \"./components/RenderCocktails\";\nimport cocktails from \"./data/cocktails\";\nimport ingredients from \"./data/ingredients\";\nimport SearchForm from \"./components/SearchForm/SearchForm\";\nimport Heading from \"./components/Heading/Heading\";\nimport Subheading from \"./components/Subheading/Subheading\";\nimport Columns from \"./components/Columns/Columns\";\n\nconst App = () => {\n    const [selectedIngredients, setSelectedIngredients] = useState([]);\n    const [notSelectedIngredients, setNotSelectedIngredients] = useState(\n        ingredients.ingredients\n    );\n    const [matchingCocktails, setMatchingCocktails] = useState([]);\n\n    const handleSelectedIngredients = (ingredientId) => {\n        const ingredientIndex = ingredients.ingredients.findIndex(\n            (ingredient) => ingredient.ingredient_id === ingredientId\n        );\n        const ingredient = ingredients.ingredients[ingredientIndex];\n\n        if (\n            !selectedIngredients.find(\n                (ingredient) => ingredient.ingredient_id === ingredientId\n            )\n        ) {\n            setSelectedIngredients((prevState) => {\n                return [...prevState, ingredient];\n            });\n\n            setNotSelectedIngredients((prevState) => {\n                const filteredIngs = prevState.filter((ingredient) => {\n                    return ingredient.ingredient_id !== ingredientId;\n                });\n\n                return filteredIngs;\n            });\n        } else {\n            setNotSelectedIngredients((prevState) => {\n                return [...prevState, ingredient];\n            });\n\n            setSelectedIngredients((prevState) => {\n                const filteredIngs = prevState.filter((ingredient) => {\n                    return ingredient.ingredient_id !== ingredientId;\n                });\n\n                return filteredIngs;\n            });\n        }\n    };\n\n    useEffect(() => {\n        const ingredientIds = [];\n        const matchedCocktails = [];\n\n        selectedIngredients.forEach((ingredient) => {\n            ingredientIds.push(ingredient.ingredient_id);\n        });\n\n        ingredientIds.sort();\n\n        cocktails.cocktails.forEach((cocktail) => {\n            cocktail.cocktail_ingredient_ids\n                .sort()\n                .every((id, index) => id === ingredientIds[index]) &&\n                matchedCocktails.push(cocktail);\n        });\n\n        setMatchingCocktails(matchedCocktails);\n    }, [selectedIngredients]);\n\n    return (\n        <div className=\"content\">\n            <Heading>Cocktails</Heading>\n            <Subheading>\n                A tool to quickly and simply find a cocktail to make with the\n                ingredients you have.\n            </Subheading>\n\n            <div style={{ display: \"flex\" }}>\n                <SearchForm\n                    selectedIngs={handleSelectedIngredients}\n                    ingredients={notSelectedIngredients}\n                ></SearchForm>\n\n                {selectedIngredients.length !== 0 && (\n                    <GridList\n                        ingredients={selectedIngredients}\n                        onClick={handleSelectedIngredients}\n                        className=\"ingredients__item\"\n                    />\n                )}\n            </div>\n\n            {matchingCocktails.length !== 0 && (\n                <div>\n                    <p>Results:</p>\n\n                    <RenderCocktails matchedCocktails={matchingCocktails} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}